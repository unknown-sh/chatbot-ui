name: Docker Build

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:latest
        options: --privileged

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # Install Docker within Docker
    - name: Install Docker within Docker
      run: |
        apk add --no-cache docker-cli

    # Pull the latest version of the base image
    - name: Pull latest base image
      run: docker pull chatbot-ui:latest

    # Install Supabase CLI
    - name: Install Supabase CLI
      run: |
        # Check if the platform is Linux or macOS
        if [[ "$OSTYPE" == "linux-gnu"* ]]; then
            sudo apt-get update && sudo apt-get install -y curl
            curl -fsSL https://packages.supabase.io/apt/cli/supabase.key | sudo apt-key add -
            sudo add-apt-repository "deb https://packages.supabase.io/apt/cli $(lsb_release -cs) main"
            sudo apt-get update && sudo apt-get install -y supabase-cli
        elif [[ "$OSTYPE" == "darwin"* ]]; then
            brew install supabase/tap/supabase
        else
            echo "Unsupported OS"
            exit 1
        fi

    # Start Supabase
    - name: Start Supabase
      run: supabase start

    # Fill in Secrets
    - name: Fill in Secrets
      run: |
        cp .env.local.example .env.local
        supabase_status=$(supabase status)
        supabase_url=$(echo "$supabase_status" | grep -oP 'API URL: \K.*')
        service_role_key=$(echo "$supabase_status" | grep -oP 'Service Role Key: \K.*')
        sed -i "s|NEXT_PUBLIC_SUPABASE_URL=.*|NEXT_PUBLIC_SUPABASE_URL=$supabase_url|" .env.local
        sed -i "s|SUPABASE_SERVICE_ROLE_KEY=.*|SUPABASE_SERVICE_ROLE_KEY=$service_role_key|" .env.local

    # Install Ollama (optional)
    - name: Install Ollama
      run: |
        # Add commands to install Ollama here (if needed)

    # Run the app locally
    - name: Run app locally
      run: npm run chat

    # Build Docker image within DinD container
    - name: Build Docker image
      run: |
        docker build -t chatbot-ui .

    # Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Push Docker image
    - name: Push Docker image
      run: |
        docker tag chatbot-ui ${{ secrets.DOCKER_USERNAME }}/chatbot-ui:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/chatbot-ui:latest

