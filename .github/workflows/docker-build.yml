name: Docker Build

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:latest
        options: --privileged

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # Add Docker's official GPG key
    - name: Add Docker's GPG key
      run: |
        sudo apt-get update
        sudo apt-get install -y ca-certificates curl
        sudo install -m 0755 -d /etc/apt/keyrings
        sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        sudo chmod a+r /etc/apt/keyrings/docker.asc

    # Add Docker repository to Apt sources
    - name: Add Docker repository
      run: |
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
        $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
        sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update

    # Install Docker using apt after setting up the repository
    - name: Install Docker
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

    # Pull the latest version of the base image
    - name: Pull latest base image
      run: docker pull unknownsh/chatbot-ui:latest

    # Install Supabase CLI
    - name: Install Supabase CLI
      run: |
        sudo apt update
        sudo apt install -y curl
        release_url=$(curl -sSL https://api.github.com/repos/supabase/cli/releases/latest | grep -oP '"browser_download_url": "\K.*?supabase_.*?_linux_amd64.deb')
        curl -LO "$release_url"
        sudo dpkg -i supabase_*.deb

    # Start Supabase
    - name: Start Supabase
      run: supabase start

    # Fill in Secrets
    - name: Fill in Secrets
      run: |
        cp .env.local.example .env.local
        supabase_status=$(supabase status) || { echo "Failed to get Supabase status"; exit 1; }
        supabase_url=$(echo "$supabase_status" | grep -oP 'API URL: \K.*') || { echo "Failed to extract Supabase API URL"; exit 1; }
        service_role_key=$(echo "$supabase_status" | grep -oP 'Service Role Key: \K.*') || { echo "Failed to extract Service Role Key"; exit 1; }
        sed -i "s|NEXT_PUBLIC_SUPABASE_URL=.*|NEXT_PUBLIC_SUPABASE_URL=$supabase_url|" .env.local || { echo "Failed to update NEXT_PUBLIC_SUPABASE_URL"; exit 1; }
        sed -i "s|SUPABASE_SERVICE_ROLE_KEY=.*|SUPABASE_SERVICE_ROLE_KEY=$service_role_key|" .env.local || { echo "Failed to update SUPABASE_SERVICE_ROLE_KEY"; exit 1; }

    # Install Ollama (optional)
    - name: Install Ollama
      run: |
        # Add commands to install Ollama here (if needed)

    # Run the app locally
    - name: Run app locally
      run: npm run chat

    # Build Docker image within DinD container
    - name: Build Docker image
      run: |
        docker build -t chatbot-ui .

    # Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Push Docker image
    - name: Push Docker image
      run: |
        docker tag chatbot-ui ${{ secrets.DOCKER_USERNAME }}/chatbot-ui:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/chatbot-ui:latest

